@page "/users"

@using System.Net.Http;
@using System.Net.Http.Json;
@inject NavigationManager NavManager
@inject HttpClient Http
@inject IDialogService DialogService

@rendermode InteractiveServer

<FluentDialogProvider />
<h3>UserIndex</h3>
<FluentGrid Style="margin-top: 24px;">
    <FluentGridItem lg="12" md="12">
        <FluentButton Appearance="Appearance.Accent" OnClick="@OpenPanelRight">Invite User</FluentButton>
    </FluentGridItem>
    <FluentGridItem lg="12" md="12">
        <div style="height: 434px; overflow:auto;" tabindex="-1">
            <FluentDataGrid Loading="true" ItemsProvider="foodRecallProvider" Virtualize="true" ItemSize="46" GenerateHeader="GenerateHeaderOption.Sticky" TGridItem="FoodRecall">
               
                <PropertyColumn Property="@(c => c!.country)" Style="color: #af5f00 ;" />
                <PropertyColumn Property="@(c => c!.city)" />               
                <PropertyColumn Property="@(c => c!.status)" />               
            </FluentDataGrid>
        </div>
    </FluentGridItem>
</FluentGrid>
@code {

    private List<FoodRecall>? users = new();
    private InviteUserModel userModel = new();
    GridItemsProvider<FoodRecall> foodRecallProvider = default!;
    int numResults;
    private IDialogReference? _dialog;

    protected override async Task OnInitializedAsync()
    {
        // Define the GridRowsDataProvider. Its job is to convert QuickGrid's GridRowsDataProviderRequest into a query against
        // an arbitrary data soure. In this example, we need to translate query parameters into the particular URL format
        // supported by the external JSON API. It's only possible to perform whatever sorting/filtering/etc is supported
        // by the external API.
        foodRecallProvider = async req =>
        {
            var url = NavManager.GetUriWithQueryParameters("https://api.fda.gov/food/enforcement.json", new Dictionary<string, object?>
                        {
                { "skip", req.StartIndex },
                { "limit", req.Count },
                        });

            var response = await Http.GetFromJsonAsync<FoodRecallQueryResult>(url, req.CancellationToken);

            // Simulate a slow data retrieval process
            if (req.Count is null)
            {
                await Task.Delay(2500);
            }
            return GridItemsProviderResult.From(
                items: response!.Results,
                totalItemCount: response!.Meta.Results.Total);
        };

        // Display the number of results just for information. This is completely separate from the grid.
        // numResults = (await Http.GetFromJsonAsync<FoodRecallQueryResult>("https://api.fda.gov/food/enforcement.json"))!.Meta.Results.Total;
    }

    private async void OpenPanelRight()
    {
        userModel = new();
        _dialog = await DialogService.ShowPanelAsync<InviteUserPanel>(userModel, new DialogParameters<InviteUserModel>()
            {
                Content = userModel,
                Alignment = HorizontalAlignment.Right,
                Title = $"Invite User",
                PrimaryAction = string.Empty,
                SecondaryAction = string.Empty

            });
        DialogResult result = await _dialog.Result;
        HandlePanel(result);
    }

    private async void HandlePanel(DialogResult result)
    {
        if (result.Cancelled)
        {
            Console.WriteLine($"Panel cancelled");
            return;
        }
        if (result.Data is not null)
        {
            Console.WriteLine($"Panel closed ");
            return;
        }
    }
}

   


